import json
import datetime
import random
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

# –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –∫–æ–¥ –¥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω, API –ë—ñ—Ç–∫–æ—ó–Ω–∞ —Ç–∞–∫–æ–∂ –º–∏ –π–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–∞—î–º–æ
BOT_TOKEN = "your_token_here"  # –±–æ—Ç 
ADMIN_ID = 123456789  # Telegram ID –¥–ª—è –∞–¥–º—ñ–Ω-–ø—Ä–∞–≤
USER_DATA = "data.json"  # –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
BTC_API_URL = "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd"  

# –ì–æ—Ç—É—î–º–æ —Ç–µ–∫—Å—Ç + –∞–Ω–≥–ª—ñ–π—Å—å–∫—É –º–æ–≤—É –¥–æ–¥–∞—î–º–æ
TEXTS = {
    "ua": {
        "start": "üá∫üá¶ –í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É",
        "welcome": "üëã –í—ñ—Ç–∞—é, {name}! –¶–µ –≥—Ä–∞ '–ö–∞–º—ñ–Ω—å-–Ω–æ–∂–∏—Ü—ñ-–ø–∞–ø—ñ—Ä'.\n\n"
                   "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
                   "/play - –ü–æ—á–∞—Ç–∏ –≥—Ä—É\n"
                   "/lang - –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É\n"
                   "/help - –î–æ–ø–æ–º–æ–≥–∞\n"
                   "/info - –ü—Ä–∞–≤–∏–ª–∞ –≥—Ä–∏\n"
                   "/about - –ü—Ä–æ –±–æ—Ç–∞\n"
                   "/bitcoin - –ö—É—Ä—Å Bitcoin\n",
        "game_choice": "–¢–≤—ñ–π –≤–∏–±—ñ—Ä: {choice}\n–ú—ñ–π –≤–∏–±—ñ—Ä: {bot_choice}\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}",
        "stats": "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ü–µ—Ä–µ–º–æ–≥–∏: {wins}\n–ü–æ—Ä–∞–∑–∫–∏: {losses}\n–ù—ñ—á–∏—ó: {draws}",
        "exit": "‚ùå–í–∏–π—Ç–∏‚ùå",
        "refused": "–ñ–∞–ª–∫–æ üò¢\n–ù–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–∑—É –∑—ñ–≥—Ä–∞—î–º–æ! –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /play",
        "help": "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞:\n"
                "- –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥—Ä–∏\n"
                "- /play - –ø–æ—á–∞—Ç–∏ –Ω–æ–≤—É –≥—Ä—É\n"
                "- /lang - –∑–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É\n"
                "- /info - –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä–∏\n"
                "- /bitcoin - –∫—É—Ä—Å Bitcoin\n"  
                "- /stats - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        "info": "üìù –ü—Ä–∞–≤–∏–ª–∞ –≥—Ä–∏:\n"
                "- –ö–∞–º—ñ–Ω—å –ø–µ—Ä–µ–º–∞–≥–∞—î –Ω–æ–∂–∏—Ü—ñ\n"
                "- –ù–æ–∂–∏—Ü—ñ –ø–µ—Ä–µ–º–∞–≥–∞—é—Ç—å –ø–∞–ø—ñ—Ä\n"
                "- –ü–∞–ø—ñ—Ä –ø–µ—Ä–µ–º–∞–≥–∞—î –∫–∞–º—ñ–Ω—å\n"
                "- –û–¥–Ω–∞–∫–æ–≤—ñ –≤–∏–±–æ—Ä–∏ - –Ω—ñ—á–∏—è!\n\n"
                "–Ø–∫—â–æ —Ö–æ—á–µ—à –ø–æ—á–∞—Ç–∏ - –Ω–∞—Ç–∏—Å–Ω–∏ –∫–æ–º–∞–Ω–¥—É –ø—ñ–¥ –Ω–∞–∑–≤–æ—é /play",
        "about": "ü§ñ –ü—Ä–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞:\n–¶–µ –∫–ª–∞—Å–∏—á–Ω–∞ –≥—Ä–∞ '–ö–∞–º—ñ–Ω—å-–Ω–æ–∂–∏—Ü—ñ-–ø–∞–ø—ñ—Ä' –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º–∏:"
                "\n- –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n- –ó –¥–≤–æ–º–∞ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–º–∏ –º–æ–≤–∞–º–∏ (—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ —Ç–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫–∞)\n- –ö—É—Ä—Å Bitcoin\n- –í–ª–∞—Å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        "time": "üïí –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å: {time}",
        "hello": "–ü—Ä–∏–≤—ñ—Ç, {name}! –†–∞–¥–∏–π —Ç–µ–±–µ –±–∞—á–∏—Ç–∏ üòä",
        "mood": "–£ –º–µ–Ω–µ –≤—Å–µ —á—É–¥–æ–≤–æ! –ù–∞–¥—ñ—é—Å—å, —É —Ç–µ–±–µ —Ç–µ–∂ üòâ",
        "btc_rate": "üí∞ –ü–æ—Ç–æ—á–Ω–∏–π –∫—É—Ä—Å Bitcoin: ${rate} USD",  
        "change_lang": "üåê –û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤—É –º–æ–≤—É:",
        "lang_updated": "–ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É!",
        "admin_stats": "üëë –ê–¥–º—ñ–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {users}\n–Ü–≥–æ—Ä –∑—ñ–≥—Ä–∞–Ω–æ: {games}",
        "unknown": "–ù–µ —Ä–æ–∑—É–º—ñ—é –∫–æ–º–∞–Ω–¥–∏ üòï –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /help",
        "choices": ["–ö–∞–º—ñ–Ω—å", "–ù–æ–∂–∏—Ü—ñ", "–ü–∞–ø—ñ—Ä"],
        "results": ["–í–∏ –ø–µ—Ä–µ–º–æ–≥–ª–∏! üéâ", "–í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏ üò¢", "–ù—ñ—á–∏—è! ü§ù"]
    },
    "en": {
        "start": "üá∫üá∏ Choose language",
        "welcome": "üëã Hello, {name}! This is 'Rock-Paper-Scissors' game.\n\n"
                   "Available commands:\n"
                   "/play - Start game\n"
                   "/lang - Change language\n"
                   "/help - Help\n"
                   "/info - Game rules\n"
                   "/about - About bot\n"
                   "/bitcoin - Bitcoin rate\n",  
        "game_choice": "Your choice: {choice}\nMy choice: {bot_choice}\n\nResult: {result}",
        "stats": "üìä Your stats:\nWins: {wins}\nLosses: {losses}\nDraws: {draws}",
        "exit": "‚ùåExit‚ùå",
        "refused": "Too bad üò¢\nLet's play next time! Just type /play",
        "help": "‚ÑπÔ∏è Help:\n"
                "- Use buttons to play\n"
                "- /play - start new game\n"
                "- /lang - change language\n"
                "- /info - game rules\n"
                "- /bitcoin - Bitcoin rate\n"  
                "- /stats - your statistics",
        "info": "üìù Game rules:\n"
                "- Rock beats scissors\n"
                "- Scissors beat paper\n"
                "- Paper beats rock\n"
                "- Same choices - draw!\n\n"
                "To start, press /play",
        "about": "ü§ñ About this bot:\nClassic 'Rock-Paper-Scissors' game with extra features:"
                "\n- Statistics saving\n- Multilingual\n- Bitcoin rate\n- Personal stats",
        "time": "üïí Current time: {time}",
        "hello": "Hello, {name}! Nice to see you üòä",
        "mood": "I'm great! Hope you are too üòâ",
        "btc_rate": "üí∞ Current Bitcoin rate: ${rate} USD",
        "change_lang": "üåê Choose new language:",
        "lang_updated": "Language changed to English!",
        "admin_stats": "üëë Admin stats:\nUsers: {users}\nGames played: {games}",
        "unknown": "Don't understand command üòï Use /help",
        "choices": ["Rock", "Scissors", "Paper"],
        "results": ["You won! üéâ", "You lost üò¢", "Draw! ü§ù"]
    }
}

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
def load_user_data():
    try:
        with open(USER_DATA, "r") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
def save_user_data():
    with open(USER_DATA, "w") as f:
        json.dump(user_data, f, indent=2)

# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω—å–æ–≥–æ
def info_user_data(user_id, name):
    if str(user_id) not in user_data:
        user_data[str(user_id)] = {
            "name": name,
            "lang": "ua",  # –ú–æ–≤–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            "stats": {"wins": 0, "losses": 0, "draws": 0}  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        }

# –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç, –≤–∫–ª—é—á–∞—é—á–∏ –º–æ–≤—É 
def get_text(user_id, key, **kwargs):
    lang = user_data.get(str(user_id), {"lang": "ua"}).get("lang", "ua")
    text = TEXTS[lang][key]
    return text.format(**kwargs) if kwargs else text

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏
def language_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("English üá∫üá∏", callback_data="lang_en"),
            InlineKeyboardButton("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶", callback_data="lang_ua")
        ]
    ])

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≥—Ä–∏
def game_keyboard(user_id, include_choices=True):
    lang = user_data.get(str(user_id), {"lang": "uk"}).get("lang", "uk")
    keyboard = []
    
    if include_choices:
        choices = TEXTS[lang]["choices"]
        keyboard.append([
            InlineKeyboardButton(choices[0], callback_data="choice_0"), #Rock/–ö–∞–º—ñ–Ω—å
            InlineKeyboardButton(choices[1], callback_data="choice_1"), #Scissors/–ù–æ–∂–∏—Ü—ñ
            InlineKeyboardButton(choices[2], callback_data="choice_2")  #Paper/–ü–∞–ø—ñ—Ä
        ])
    
    keyboard.append([InlineKeyboardButton(get_text(user_id, "exit"), callback_data="exit_game")])
    return InlineKeyboardMarkup(keyboard)

# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—è 
def winner(user_choice, bot_choice):
    # 0-–∫–∞–º—ñ–Ω—å, 1-–Ω–æ–∂–∏—Ü—ñ, 2-–ø–∞–ø—ñ—Ä
    if user_choice == bot_choice:
        return 2  # –ù—ñ—á–∏—è
    elif (user_choice - bot_choice) % 3 == 1:
        return 0  # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–µ—Ä–µ–º–∞–≥–∞—î
    else:
        return 1  # –ë–æ—Ç –ø–µ—Ä–µ–º–∞–≥–∞—î

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    info_user_data(user.id, user.full_name)

    if update.message:
        await update.message.reply_text(
            get_text(user.id, "start"),
            reply_markup=language_keyboard()
        )
    elif update.callback_query:
        await update.callback_query.message.reply_text(
            get_text(user.id, "start"),
            reply_markup=language_keyboard()
        )

# –§—É–Ω–∫—Ü—ñ—è –∑–º—ñ–Ω–∏ –º–æ–≤–∏
async def language_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    lang = query.data.split("_")[1]  # "lang_en" -> "en"
    
    user_data[str(user_id)]["lang"] = lang
    save_user_data()
    
    await query.edit_message_text(get_text(user_id, "welcome", name=query.from_user.full_name))
    await query.answer()

# –ö–æ–º–∞–Ω–¥–∞ /play
async def play_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    info_user_data(user.id, user.full_name)
    
    await update.message.reply_text(
        get_text(user.id, "welcome", name=user.full_name),
        reply_markup=game_keyboard(user.id)
    )

# –§—É–Ω–∫—Ü—ñ—è –≤–∏–±–æ—Ä—É –≥—Ä–∞–≤—Ü—è
async def game_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data
    
    if data == "exit_game":
        await query.edit_message_text(
            get_text(user_id, "refused"),
            reply_markup=None  # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø—ñ—Å–ª—è –≤–∏—Ö–æ–¥—É
        )
        await start(update, context)
        return
    
    # –§–æ—Ä–º—É—î–º–æ –≤–∏–±—ñ—Ä –≥—Ä–∞–≤—Ü—è (0, 1, 2)
    user_choice = int(data.split("_")[1])
    bot_choice = random.randint(0, 2) # –í–∏–ø–∞–¥–∫–æ–≤–∏–π –≤–∏–±—ñ—Ä –±–æ—Ç–∞
    result_index = winner(user_choice, bot_choice)
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats = user_data[str(user_id)]["stats"]
    if result_index == 0:
        stats["wins"] += 1
    elif result_index == 1:
        stats["losses"] += 1
    else:
        stats["draws"] += 1
    save_user_data()
    
    lang = user_data[str(user_id)]["lang"]
    choices = TEXTS[lang]["choices"]
    results = TEXTS[lang]["results"]
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç –≥—Ä–∏ 
    await query.edit_message_text(
        get_text(user_id, "game_choice",
                 choice=choices[user_choice],
                 bot_choice=choices[bot_choice],
                 result=results[result_index]) + "\n\n" +
        get_text(user_id, "stats", **stats),
        reply_markup=game_keyboard(user_id)  # –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –∑–Ω–æ–≤—É –ø—ñ—Å–ª—è –≥—Ä–∏
    )
    
# –ö–æ–º–∞–Ω–¥–∞ /lang
async def change_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    info_user_data(user.id, user.full_name)
    
    await update.message.reply_text(
        get_text(user.id, "change_lang"),
        reply_markup=language_keyboard()
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(get_text(user.id, "help"))

# –ö–æ–º–∞–Ω–¥–∞ /info
async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(get_text(user.id, "info"))

# –ö–æ–º–∞–Ω–¥–∞ /about
async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(get_text(user.id, "about"))

# –ö–æ–º–∞–Ω–¥–∞ /bitcoin 
async def btc_rate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        response = requests.get(BTC_API_URL)
        rate = response.json()["bitcoin"]["usd"]
        await update.message.reply_text(get_text(update.effective_user.id, "btc_rate", rate=rate))
    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ñ—ñ–∫—Å—É–≤–∞—Ç–∏ –∫—É—Ä—Å Bitcoin")

# –ö–æ–º–∞–Ω–¥–∞ /stats
async def user_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    info_user_data(user.id, user.full_name)
    stats = user_data[str(user.id)]["stats"]
    await update.message.reply_text(get_text(user.id, "stats", **stats))

# –ö–æ–º–∞–Ω–¥–∞ /adminstats (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞)
async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id != ADMIN_ID:
        return
    
    total_games = sum(
        u["stats"]["wins"] + u["stats"]["losses"] + u["stats"]["draws"]
        for u in user_data.values()
    )
    
    await update.message.reply_text(
        get_text(user.id, "admin_stats", users=len(user_data), games=total_games)
    )

# –†–µ–∞–∫—Ü—ñ—è –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text.lower()
    info_user_data(user.id, user.full_name)
    
    responses = {
        "–ø—Ä–∏–≤—ñ—Ç": "hello",
        "—Ö–∞–π": "hello",
        "–∑–¥–æ—Ä–æ–≤":"hello",
        "hello": "hello",
        "hey": "hello",
        "hi": "hello",
        "—è–∫ —Å–ø—Ä–∞–≤–∏?": "mood",
        "—â–æ —Ä–æ–±–∏—à?": "mood",
        "how are you?": "mood",
        "–∫–æ—Ç—Ä–∞ –≥–æ–¥–∏–Ω–∞?": "time",
        "—è–∫–∞ –≥–æ–¥–∏–Ω–∞?": "time",
        "what time is it?": "time"
    }
    
    for key, response_key in responses.items():
        if key in text:
            if response_key == "time":
                current_time = datetime.datetime.now().strftime("%H:%M:%S")
                await update.message.reply_text(get_text(user.id, "time", time=current_time))
            else:
                await update.message.reply_text(get_text(user.id, response_key, name=user.first_name))
            return
    
    await update.message.reply_text(get_text(user.id, "unknown"))

# –ó–∞–≥–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è (—Å—Ç–∞—Ä—Ç)
def main():
    global user_data
    user_data = load_user_data()  # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    
    app = Application.builder().token(BOT_TOKEN).build()
    
    # –ù–∞–ª–∞—à—Ç—É—î–º–æ –∫–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("play", play_game))
    app.add_handler(CommandHandler("lang", change_language))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("info", info))
    app.add_handler(CommandHandler("about", about))
    app.add_handler(CommandHandler("bitcoin", btc_rate))  
    app.add_handler(CommandHandler("stats", user_stats))
    app.add_handler(CommandHandler("adminstats", admin_stats))
    
    # –†–µ–∞–∫—Ü—ñ—ó –Ω–∞ –∫–Ω–æ–ø–∫–∏
    app.add_handler(CallbackQueryHandler(language_handler, pattern="^lang_"))
    app.add_handler(CallbackQueryHandler(game_handler, pattern="^(choice_|exit)"))
    
    # –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    app.run_polling()
    
if __name__ == "__main__":
    main()
